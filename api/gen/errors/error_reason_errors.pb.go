// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package errors

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// Common errors (0-999)
func IsSystemError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SystemError.String() && e.Code == 500
}

// Common errors (0-999)
func SystemError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_SystemError.String(), "系统错误")
}

// Common errors (0-999)
func SystemErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_SystemError.String(), "系统错误: "+fmt.Sprintf(msg, args...))
}

func IsFileSystemError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FileSystemError.String() && e.Code == 500
}

func FileSystemError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_FileSystemError.String(), "文件系统错误")
}

func FileSystemErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_FileSystemError.String(), "文件系统错误: "+fmt.Sprintf(msg, args...))
}

func IsNetWorkError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NetWorkError.String() && e.Code == 500
}

func NetWorkError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_NetWorkError.String(), "网络传输错误")
}

func NetWorkErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_NetWorkError.String(), "网络传输错误: "+fmt.Sprintf(msg, args...))
}

func IsDatabaseError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DatabaseError.String() && e.Code == 500
}

func DatabaseError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_DatabaseError.String(), "数据库错误")
}

func DatabaseErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_DatabaseError.String(), "数据库错误: "+fmt.Sprintf(msg, args...))
}

func IsParamsError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ParamsError.String() && e.Code == 500
}

func ParamsError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ParamsError.String(), "参数错误")
}

func ParamsErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ParamsError.String(), "参数错误: "+fmt.Sprintf(msg, args...))
}

func IsTransformError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TransformError.String() && e.Code == 500
}

func TransformError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_TransformError.String(), "数据转换失败")
}

func TransformErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_TransformError.String(), "数据转换失败: "+fmt.Sprintf(msg, args...))
}

func IsGetError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GetError.String() && e.Code == 500
}

func GetError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_GetError.String(), "获取数据失败")
}

func GetErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_GetError.String(), "获取数据失败: "+fmt.Sprintf(msg, args...))
}

func IsListError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ListError.String() && e.Code == 500
}

func ListError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ListError.String(), "获取列表数据失败")
}

func ListErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ListError.String(), "获取列表数据失败: "+fmt.Sprintf(msg, args...))
}

func IsCreateError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CreateError.String() && e.Code == 500
}

func CreateError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_CreateError.String(), "创建数据失败")
}

func CreateErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_CreateError.String(), "创建数据失败: "+fmt.Sprintf(msg, args...))
}

func IsImportError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ImportError.String() && e.Code == 500
}

func ImportError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ImportError.String(), "导入数据失败")
}

func ImportErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ImportError.String(), "导入数据失败: "+fmt.Sprintf(msg, args...))
}

func IsExportError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ExportError.String() && e.Code == 500
}

func ExportError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ExportError.String(), "导出数据失败")
}

func ExportErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ExportError.String(), "导出数据失败: "+fmt.Sprintf(msg, args...))
}

func IsUpdateError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UpdateError.String() && e.Code == 500
}

func UpdateError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_UpdateError.String(), "更新数据失败")
}

func UpdateErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_UpdateError.String(), "更新数据失败: "+fmt.Sprintf(msg, args...))
}

func IsDeleteError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DeleteError.String() && e.Code == 500
}

func DeleteError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_DeleteError.String(), "删除数据失败")
}

func DeleteErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_DeleteError.String(), "删除数据失败: "+fmt.Sprintf(msg, args...))
}

// Config service errors (1000-1999)
func IsConfigServiceError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ConfigServiceError.String() && e.Code == 500
}

// Config service errors (1000-1999)
func ConfigServiceError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ConfigServiceError.String(), "配置服务异常")
}

// Config service errors (1000-1999)
func ConfigServiceErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ConfigServiceError.String(), "配置服务异常: "+fmt.Sprintf(msg, args...))
}

func IsGetTrashError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GetTrashError.String() && e.Code == 500
}

func GetTrashError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_GetTrashError.String(), "获取回收站数据失败")
}

func GetTrashErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_GetTrashError.String(), "获取回收站数据失败: "+fmt.Sprintf(msg, args...))
}

func IsListTrashError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ListTrashError.String() && e.Code == 500
}

func ListTrashError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ListTrashError.String(), "获取回收站列表数据失败")
}

func ListTrashErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ListTrashError.String(), "获取回收站列表数据失败: "+fmt.Sprintf(msg, args...))
}

func IsDeleteTrashError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DeleteTrashError.String() && e.Code == 500
}

func DeleteTrashError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_DeleteTrashError.String(), "删除回收站数据失败")
}

func DeleteTrashErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_DeleteTrashError.String(), "删除回收站数据失败: "+fmt.Sprintf(msg, args...))
}

func IsRevertTrashError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RevertTrashError.String() && e.Code == 500
}

func RevertTrashError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_RevertTrashError.String(), "还原回收站数据失败")
}

func RevertTrashErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_RevertTrashError.String(), "还原回收站数据失败: "+fmt.Sprintf(msg, args...))
}

func IsBusinessValueTypeError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BusinessValueTypeError.String() && e.Code == 500
}

func BusinessValueTypeError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_BusinessValueTypeError.String(), "业务配置值类型错误")
}

func BusinessValueTypeErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_BusinessValueTypeError.String(), "业务配置值类型错误: "+fmt.Sprintf(msg, args...))
}

func IsResourceValueTypeError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ResourceValueTypeError.String() && e.Code == 500
}

func ResourceValueTypeError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ResourceValueTypeError.String(), "资源配置值类型错误")
}

func ResourceValueTypeErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ResourceValueTypeError.String(), "资源配置值类型错误: "+fmt.Sprintf(msg, args...))
}

func IsRenderTemplateError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RenderTemplateError.String() && e.Code == 500
}

func RenderTemplateError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_RenderTemplateError.String(), "渲染模板错误")
}

func RenderTemplateErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_RenderTemplateError.String(), "渲染模板错误: "+fmt.Sprintf(msg, args...))
}

func IsTemplateVersionExistError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TemplateVersionExistError.String() && e.Code == 500
}

func TemplateVersionExistError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_TemplateVersionExistError.String(), "模板已存在此版本")
}

func TemplateVersionExistErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_TemplateVersionExistError.String(), "模板已存在此版本: "+fmt.Sprintf(msg, args...))
}

func IsServerNotExistTemplateError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ServerNotExistTemplateError.String() && e.Code == 500
}

func ServerNotExistTemplateError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ServerNotExistTemplateError.String(), "当前服务还未提交过模板")
}

func ServerNotExistTemplateErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ServerNotExistTemplateError.String(), "当前服务还未提交过模板: "+fmt.Sprintf(msg, args...))
}

func IsConfigureVersionExistError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ConfigureVersionExistError.String() && e.Code == 500
}

func ConfigureVersionExistError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ConfigureVersionExistError.String(), "配置已存在此版本")
}

func ConfigureVersionExistErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ConfigureVersionExistError.String(), "配置已存在此版本: "+fmt.Sprintf(msg, args...))
}

func IsWatchConfigureError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_WatchConfigureError.String() && e.Code == 500
}

func WatchConfigureError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_WatchConfigureError.String(), "监听版本更新失败")
}

func WatchConfigureErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_WatchConfigureError.String(), "监听版本更新失败: "+fmt.Sprintf(msg, args...))
}

func IsTokenAuthError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TokenAuthError.String() && e.Code == 500
}

func TokenAuthError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_TokenAuthError.String(), "token验证失败")
}

func TokenAuthErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_TokenAuthError.String(), "token验证失败: "+fmt.Sprintf(msg, args...))
}

func IsServerNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ServerNotFound.String() && e.Code == 500
}

func ServerNotFound(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ServerNotFound.String(), "服务不存在")
}

func ServerNotFoundf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ServerNotFound.String(), "服务不存在: "+fmt.Sprintf(msg, args...))
}

func IsPasswordError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PasswordError.String() && e.Code == 500
}

func PasswordError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_PasswordError.String(), "密码错误")
}

func PasswordErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_PasswordError.String(), "密码错误: "+fmt.Sprintf(msg, args...))
}

func IsPasswordExpireError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PasswordExpireError.String() && e.Code == 500
}

func PasswordExpireError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_PasswordExpireError.String(), "密码已过期")
}

func PasswordExpireErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_PasswordExpireError.String(), "密码已过期: "+fmt.Sprintf(msg, args...))
}

func IsRefreshTokenError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RefreshTokenError.String() && e.Code == 401
}

func RefreshTokenError(args ...any) *errors.Error {
	return errors.New(401, ErrorReason_RefreshTokenError.String(), "刷新token失败")
}

func RefreshTokenErrorf(msg string, args ...any) *errors.Error {
	return errors.New(401, ErrorReason_RefreshTokenError.String(), "刷新token失败: "+fmt.Sprintf(msg, args...))
}

func IsBroadcastConfigureError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BroadcastConfigureError.String() && e.Code == 500
}

func BroadcastConfigureError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_BroadcastConfigureError.String(), "广播配置变更消息失败")
}

func BroadcastConfigureErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_BroadcastConfigureError.String(), "广播配置变更消息失败: "+fmt.Sprintf(msg, args...))
}

// Resource service errors (2000-2999)
func IsResourceServiceError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ResourceServiceError.String() && e.Code == 500
}

// Resource service errors (2000-2999)
func ResourceServiceError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ResourceServiceError.String(), "资源服务异常")
}

// Resource service errors (2000-2999)
func ResourceServiceErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ResourceServiceError.String(), "资源服务异常: "+fmt.Sprintf(msg, args...))
}

func IsNoSupportStoreError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NoSupportStoreError.String() && e.Code == 500
}

func NoSupportStoreError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_NoSupportStoreError.String(), "不支持的存储引擎")
}

func NoSupportStoreErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_NoSupportStoreError.String(), "不支持的存储引擎: "+fmt.Sprintf(msg, args...))
}

func IsNoSupportFileTypeError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NoSupportFileTypeError.String() && e.Code == 500
}

func NoSupportFileTypeError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_NoSupportFileTypeError.String(), "不支持的文件类型")
}

func NoSupportFileTypeErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_NoSupportFileTypeError.String(), "不支持的文件类型: "+fmt.Sprintf(msg, args...))
}

func IsVerifySignError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_VerifySignError.String() && e.Code == 500
}

func VerifySignError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_VerifySignError.String(), "签名验证失败")
}

func VerifySignErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_VerifySignError.String(), "签名验证失败: "+fmt.Sprintf(msg, args...))
}

func IsChunkUploadError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ChunkUploadError.String() && e.Code == 500
}

func ChunkUploadError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ChunkUploadError.String(), "分片上传失败")
}

func ChunkUploadErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ChunkUploadError.String(), "分片上传失败: "+fmt.Sprintf(msg, args...))
}

func IsStatusProgressError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_StatusProgressError.String() && e.Code == 500
}

func StatusProgressError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_StatusProgressError.String(), "文件上传中")
}

func StatusProgressErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_StatusProgressError.String(), "文件上传中: "+fmt.Sprintf(msg, args...))
}

func IsUploadFileError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UploadFileError.String() && e.Code == 500
}

func UploadFileError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_UploadFileError.String(), "文件上传失败")
}

func UploadFileErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_UploadFileError.String(), "文件上传失败: "+fmt.Sprintf(msg, args...))
}

func IsInitStoreError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_InitStoreError.String() && e.Code == 500
}

func InitStoreError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_InitStoreError.String(), "存储引擎初始化失败")
}

func InitStoreErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_InitStoreError.String(), "存储引擎初始化失败: "+fmt.Sprintf(msg, args...))
}

func IsFileFormatError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FileFormatError.String() && e.Code == 500
}

func FileFormatError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_FileFormatError.String(), "文件格式错误")
}

func FileFormatErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_FileFormatError.String(), "文件格式错误: "+fmt.Sprintf(msg, args...))
}

func IsNotExistFileError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotExistFileError.String() && e.Code == 500
}

func NotExistFileError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_NotExistFileError.String(), "文件不存在")
}

func NotExistFileErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_NotExistFileError.String(), "文件不存在: "+fmt.Sprintf(msg, args...))
}

func IsAlreadyExistFileNameError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AlreadyExistFileNameError.String() && e.Code == 500
}

func AlreadyExistFileNameError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_AlreadyExistFileNameError.String(), "文件名已存在")
}

func AlreadyExistFileNameErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_AlreadyExistFileNameError.String(), "文件名已存在: "+fmt.Sprintf(msg, args...))
}

func IsAccessResourceError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AccessResourceError.String() && e.Code == 500
}

func AccessResourceError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_AccessResourceError.String(), "访问资源文件异常")
}

func AccessResourceErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_AccessResourceError.String(), "访问资源文件异常: "+fmt.Sprintf(msg, args...))
}

func IsExportFileNameDupError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ExportFileNameDupError.String() && e.Code == 500
}

func ExportFileNameDupError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ExportFileNameDupError.String(), "导出文件重命名重复")
}

func ExportFileNameDupErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ExportFileNameDupError.String(), "导出文件重命名重复: "+fmt.Sprintf(msg, args...))
}

func IsExportTaskProcessError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ExportTaskProcessError.String() && e.Code == 500
}

func ExportTaskProcessError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ExportTaskProcessError.String(), "导出任务正在进行中")
}

func ExportTaskProcessErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ExportTaskProcessError.String(), "导出任务正在进行中: "+fmt.Sprintf(msg, args...))
}

func IsExceedMaxSizeError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ExceedMaxSizeError.String() && e.Code == 500
}

func ExceedMaxSizeError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ExceedMaxSizeError.String(), "超过允许上传的文件大小")
}

func ExceedMaxSizeErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ExceedMaxSizeError.String(), "超过允许上传的文件大小: "+fmt.Sprintf(msg, args...))
}

// Manager service errors (3000-3999)
func IsManagerServiceError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ManagerServiceError.String() && e.Code == 500
}

// Manager service errors (3000-3999)
func ManagerServiceError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ManagerServiceError.String(), "管理中心服务异常")
}

// Manager service errors (3000-3999)
func ManagerServiceErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ManagerServiceError.String(), "管理中心服务异常: "+fmt.Sprintf(msg, args...))
}

func IsDepartmentPurviewError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DepartmentPurviewError.String() && e.Code == 500
}

func DepartmentPurviewError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_DepartmentPurviewError.String(), "无此部门权限")
}

func DepartmentPurviewErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_DepartmentPurviewError.String(), "无此部门权限: "+fmt.Sprintf(msg, args...))
}

func IsRolePurviewError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RolePurviewError.String() && e.Code == 500
}

func RolePurviewError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_RolePurviewError.String(), "无此角色权限")
}

func RolePurviewErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_RolePurviewError.String(), "无此角色权限: "+fmt.Sprintf(msg, args...))
}

func IsUserPurviewError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UserPurviewError.String() && e.Code == 500
}

func UserPurviewError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_UserPurviewError.String(), "无此用户权限")
}

func UserPurviewErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_UserPurviewError.String(), "无此用户权限: "+fmt.Sprintf(msg, args...))
}

func IsMenuPurviewError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MenuPurviewError.String() && e.Code == 500
}

func MenuPurviewError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_MenuPurviewError.String(), "无此菜单权限")
}

func MenuPurviewErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_MenuPurviewError.String(), "无此菜单权限: "+fmt.Sprintf(msg, args...))
}

func IsEditSystemDataError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EditSystemDataError.String() && e.Code == 500
}

func EditSystemDataError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_EditSystemDataError.String(), "系统数据，不允许修改")
}

func EditSystemDataErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_EditSystemDataError.String(), "系统数据，不允许修改: "+fmt.Sprintf(msg, args...))
}

func IsGenCaptchaError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GenCaptchaError.String() && e.Code == 500
}

func GenCaptchaError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_GenCaptchaError.String(), "生成验证码失败")
}

func GenCaptchaErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_GenCaptchaError.String(), "生成验证码失败: "+fmt.Sprintf(msg, args...))
}

func IsSendCaptchaError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SendCaptchaError.String() && e.Code == 500
}

func SendCaptchaError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_SendCaptchaError.String(), "发送验证码失败")
}

func SendCaptchaErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_SendCaptchaError.String(), "发送验证码失败: "+fmt.Sprintf(msg, args...))
}

func IsDeleteSystemDataError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DeleteSystemDataError.String() && e.Code == 500
}

func DeleteSystemDataError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_DeleteSystemDataError.String(), "系统数据，不允许删除")
}

func DeleteSystemDataErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_DeleteSystemDataError.String(), "系统数据，不允许删除: "+fmt.Sprintf(msg, args...))
}

func IsVerifyCaptchaError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_VerifyCaptchaError.String() && e.Code == 500
}

func VerifyCaptchaError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_VerifyCaptchaError.String(), "验证码错误")
}

func VerifyCaptchaErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_VerifyCaptchaError.String(), "验证码错误: "+fmt.Sprintf(msg, args...))
}

func IsUsernameFormatError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UsernameFormatError.String() && e.Code == 500
}

func UsernameFormatError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_UsernameFormatError.String(), "用户名格式错误")
}

func UsernameFormatErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_UsernameFormatError.String(), "用户名格式错误: "+fmt.Sprintf(msg, args...))
}

func IsUsernameNotExistError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UsernameNotExistError.String() && e.Code == 500
}

func UsernameNotExistError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_UsernameNotExistError.String(), "用户不存在")
}

func UsernameNotExistErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_UsernameNotExistError.String(), "用户不存在: "+fmt.Sprintf(msg, args...))
}

func IsUserDisableError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UserDisableError.String() && e.Code == 500
}

func UserDisableError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_UserDisableError.String(), "用户已被禁用")
}

func UserDisableErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_UserDisableError.String(), "用户已被禁用: "+fmt.Sprintf(msg, args...))
}

func IsRoleDisableError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RoleDisableError.String() && e.Code == 500
}

func RoleDisableError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_RoleDisableError.String(), "角色已被禁用")
}

func RoleDisableErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_RoleDisableError.String(), "角色已被禁用: "+fmt.Sprintf(msg, args...))
}

func IsGenTokenError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GenTokenError.String() && e.Code == 500
}

func GenTokenError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_GenTokenError.String(), "token生成失败")
}

func GenTokenErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_GenTokenError.String(), "token生成失败: "+fmt.Sprintf(msg, args...))
}

func IsParseTokenError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ParseTokenError.String() && e.Code == 500
}

func ParseTokenError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ParseTokenError.String(), "token解析失败")
}

func ParseTokenErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ParseTokenError.String(), "token解析失败: "+fmt.Sprintf(msg, args...))
}

func IsForbiddenError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ForbiddenError.String() && e.Code == 403
}

func ForbiddenError(args ...any) *errors.Error {
	return errors.New(403, ErrorReason_ForbiddenError.String(), "无接口权限")
}

func ForbiddenErrorf(msg string, args ...any) *errors.Error {
	return errors.New(403, ErrorReason_ForbiddenError.String(), "无接口权限: "+fmt.Sprintf(msg, args...))
}

func IsNotPermissionError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotPermissionError.String() && e.Code == 500
}

func NotPermissionError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_NotPermissionError.String(), "无资源权限")
}

func NotPermissionErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_NotPermissionError.String(), "无资源权限: "+fmt.Sprintf(msg, args...))
}

// Usercenter errors (4000-4999)
func IsUserServiceError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UserServiceError.String() && e.Code == 500
}

// Usercenter errors (4000-4999)
func UserServiceError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_UserServiceError.String(), "用户服务异常")
}

// Usercenter errors (4000-4999)
func UserServiceErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_UserServiceError.String(), "用户服务异常: "+fmt.Sprintf(msg, args...))
}

func IsGenCaptchaTypeError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GenCaptchaTypeError.String() && e.Code == 500
}

func GenCaptchaTypeError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_GenCaptchaTypeError.String(), "错误的验证码类型")
}

func GenCaptchaTypeErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_GenCaptchaTypeError.String(), "错误的验证码类型: "+fmt.Sprintf(msg, args...))
}

func IsNotExistEmailError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotExistEmailError.String() && e.Code == 500
}

func NotExistEmailError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_NotExistEmailError.String(), "不存在此邮箱")
}

func NotExistEmailErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_NotExistEmailError.String(), "不存在此邮箱: "+fmt.Sprintf(msg, args...))
}

func IsOAuthLoginError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OAuthLoginError.String() && e.Code == 500
}

func OAuthLoginError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_OAuthLoginError.String(), "三方授权登陆失败")
}

func OAuthLoginErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_OAuthLoginError.String(), "三方授权登陆失败: "+fmt.Sprintf(msg, args...))
}

func IsNotUserError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotUserError.String() && e.Code == 500
}

func NotUserError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_NotUserError.String(), "用户不存在")
}

func NotUserErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_NotUserError.String(), "用户不存在: "+fmt.Sprintf(msg, args...))
}

func IsNotAppScopeError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotAppScopeError.String() && e.Code == 500
}

func NotAppScopeError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_NotAppScopeError.String(), "用户无应用权限")
}

func NotAppScopeErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_NotAppScopeError.String(), "用户无应用权限: "+fmt.Sprintf(msg, args...))
}

func IsRsaDecodeError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RsaDecodeError.String() && e.Code == 500
}

func RsaDecodeError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_RsaDecodeError.String(), "rsa解密失败")
}

func RsaDecodeErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_RsaDecodeError.String(), "rsa解密失败: "+fmt.Sprintf(msg, args...))
}

func IsPasswordFormatError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PasswordFormatError.String() && e.Code == 500
}

func PasswordFormatError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_PasswordFormatError.String(), "密码格式错误")
}

func PasswordFormatErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_PasswordFormatError.String(), "密码格式错误: "+fmt.Sprintf(msg, args...))
}

func IsDisableRegisterError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DisableRegisterError.String() && e.Code == 401
}

func DisableRegisterError(args ...any) *errors.Error {
	return errors.New(401, ErrorReason_DisableRegisterError.String(), "应用已关闭注册权限")
}

func DisableRegisterErrorf(msg string, args ...any) *errors.Error {
	return errors.New(401, ErrorReason_DisableRegisterError.String(), "应用已关闭注册权限: "+fmt.Sprintf(msg, args...))
}

func IsAlreadyExistEmailError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AlreadyExistEmailError.String() && e.Code == 500
}

func AlreadyExistEmailError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_AlreadyExistEmailError.String(), "邮箱已存在")
}

func AlreadyExistEmailErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_AlreadyExistEmailError.String(), "邮箱已存在: "+fmt.Sprintf(msg, args...))
}

func IsAlreadyExistUsernameError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AlreadyExistUsernameError.String() && e.Code == 500
}

func AlreadyExistUsernameError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_AlreadyExistUsernameError.String(), "账号已存在")
}

func AlreadyExistUsernameErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_AlreadyExistUsernameError.String(), "账号已存在: "+fmt.Sprintf(msg, args...))
}

func IsRegisterError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RegisterError.String() && e.Code == 500
}

func RegisterError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_RegisterError.String(), "用户注册失败")
}

func RegisterErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_RegisterError.String(), "用户注册失败: "+fmt.Sprintf(msg, args...))
}

func IsBindError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BindError.String() && e.Code == 500
}

func BindError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_BindError.String(), "用户注册失败")
}

func BindErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_BindError.String(), "用户注册失败: "+fmt.Sprintf(msg, args...))
}

func IsLoginError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LoginError.String() && e.Code == 500
}

func LoginError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_LoginError.String(), "登陆失败")
}

func LoginErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_LoginError.String(), "登陆失败: "+fmt.Sprintf(msg, args...))
}

func IsExistFeedbackError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ExistFeedbackError.String() && e.Code == 500
}

func ExistFeedbackError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ExistFeedbackError.String(), "已存在重复的反馈内容")
}

func ExistFeedbackErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ExistFeedbackError.String(), "已存在重复的反馈内容: "+fmt.Sprintf(msg, args...))
}

func IsAlreadyBindError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AlreadyBindError.String() && e.Code == 500
}

func AlreadyBindError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_AlreadyBindError.String(), "该账号已绑定过其他平台，不能重复绑定")
}

func AlreadyBindErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_AlreadyBindError.String(), "该账号已绑定过其他平台，不能重复绑定: "+fmt.Sprintf(msg, args...))
}

func IsAppMaintenanceError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AppMaintenanceError.String() && e.Code == 500
}

func AppMaintenanceError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_AppMaintenanceError.String(), "当前应用正在维护中")
}

func AppMaintenanceErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_AppMaintenanceError.String(), "当前应用正在维护中: "+fmt.Sprintf(msg, args...))
}

func IsChannelCloseError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ChannelCloseError.String() && e.Code == 500
}

func ChannelCloseError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ChannelCloseError.String(), "当前渠道已关闭")
}

func ChannelCloseErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ChannelCloseError.String(), "当前渠道已关闭: "+fmt.Sprintf(msg, args...))
}

func IsAppNotBindChannelError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AppNotBindChannelError.String() && e.Code == 500
}

func AppNotBindChannelError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_AppNotBindChannelError.String(), "应用未开通此渠道")
}

func AppNotBindChannelErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_AppNotBindChannelError.String(), "应用未开通此渠道: "+fmt.Sprintf(msg, args...))
}

func IsChannelNotBindUserError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ChannelNotBindUserError.String() && e.Code == 500
}

func ChannelNotBindUserError(args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ChannelNotBindUserError.String(), "当前授权渠道未绑定用户")
}

func ChannelNotBindUserErrorf(msg string, args ...any) *errors.Error {
	return errors.New(500, ErrorReason_ChannelNotBindUserError.String(), "当前授权渠道未绑定用户: "+fmt.Sprintf(msg, args...))
}
