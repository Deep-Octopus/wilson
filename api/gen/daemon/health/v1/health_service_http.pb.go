// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.29.2
// source: daemon/health/v1/health_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationHealthCheck = "/wilson.api.daemon.health.v1.Health/Check"

type HealthHTTPServer interface {
	Check(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

func RegisterHealthHTTPServer(s *http.Server, srv HealthHTTPServer) {
	r := s.Route("/")
	r.GET("/daemon/v1/health/check", _Health_Check2_HTTP_Handler(srv))
}

func _Health_Check2_HTTP_Handler(srv HealthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHealthCheck)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.Check(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type HealthHTTPClient interface {
	Check(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type HealthHTTPClientImpl struct {
	cc *http.Client
}

func NewHealthHTTPClient(client *http.Client) HealthHTTPClient {
	return &HealthHTTPClientImpl{client}
}

func (c *HealthHTTPClientImpl) Check(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/daemon/v1/health/check"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHealthCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
